@using PluginBuilder.APIModels
@model ExtendedPublishedVersion
@{
    Layout = "_Layout";
    ViewData.SetActivePage($"{Model.ProjectSlug}");
}

<div class="sticky-header" style="margin-top: 0; padding-top: 0;">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb" style="margin-bottom: 0;">
            <li class="breadcrumb-item">
                <a asp-action="ListPlugins">Plugins</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page" style="color: black;">@Model.ProjectSlug</li>
        </ol>
    </nav>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            <vc:icon symbol="close" />
        </button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            <vc:icon symbol="close" />
        </button>
    </div>
}

@if (Model.HasPublishedPlugin)
{
    <div class="alert alert-warning alert-dismissible mb-4" role="alert">
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            <vc:icon symbol="close" />
        </button>
        <h5 class="alert-heading">Important notice about plugin approval/rejection</h5>
        <p class="mb-0">
            You cannot approve or reject a plugin that was created by you. To approve or reject a plugin, you'd need to sign the plugin title with your PGP private key.
            <a href="#warning-details" data-bs-toggle="collapse" class="alert-link">Read more</a>
        </p>
        <div class="collapse" id="warning-details">
            <p class="my-3"><strong>Sign off a plugin:</strong> To sign a plugin for approval or rejection, copy the the plugin name and in your local system you can run the sign command using your PGP private key.</p>
            <p class="mb-3"><strong>For Example:</strong> Assuming we have a plugin with name BTCPayPlugin, open your command prompt, and run the command: echo -n "BTCPayPlugin" | gpg --armor --sign --default-key {KEYID}. Replace {KEYID} with your Key Id.</p>
            <p class="mb-3">This should print out your signature, which is your signed version of the plugin. This signature is what you would use to approve or reject a plugin</p>
        </div>
    </div>
}

<div class="d-sm-flex align-items-center justify-content-between">
    <div class="d-sm-flex align-items-center">
        <h2 class="mb-0">
            @ViewData["Title"]
        </h2>
    </div>
    <div class="d-flex gap-3 mt-3 mt-sm-0">
        @if (Model.HasPublishedPlugin)
        {
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#pgpKeyModal-approve">Approve</button>
            <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#pgpKeyModal-reject">Reject</button>
        }
        <a href="@((string)Model.BuildInfo["url"])" rel="noreferrer noopener" class="btn btn-outline-info">Download</a>
    </div>
</div>


<!-- Plugin Details section -->
<div class="card p-4 mt-5 mb-5">
    <h4 class="mb-2">Plugin Details</h4>
    <div class="table-responsive">
        <table class="table table-hover">
            <tr>
                <th class="fw-semibold w-150px">Name</th>
                <td>@((string)Model.ManifestInfo["Name"])</td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Description</th>
                <td>@((string)Model.ManifestInfo["Description"])</td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Version</th>
                <td>@((string)Model.ManifestInfo["Version"])</td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Project Repository</th>
                <td>
                    <a href="@((string)Model.BuildInfo["gitRepository"])" target="_blank" rel="noopener noreferrer">
                        @((string)Model.BuildInfo["gitRepository"])
                    </a>
                </td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Plugin Directory</th>
                <td>@((string)Model.BuildInfo["pluginDir"])</td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Git Ref</th>
                <td>@((string)Model.BuildInfo["gitRef"])</td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Build Configuration</th>
                <td>@((string)Model.BuildInfo["buildConfig"])</td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Documentation</th>
                <td>
                    <a href="@Model.Documentation" target="_blank" rel="noopener noreferrer">
                        @Model.Documentation
                    </a>
                </td>
            </tr>
            <tr>
                <th class="fw-semibold w-150px">Dependencies</th>
                <td>
                    @foreach (var dependency in Model.ManifestInfo["Dependencies"])
                    {
                        <div>
                            <span>@((string)dependency["Identifier"]) @((string)dependency["Condition"])</span>
                        </div>
                    }
                </td>
            </tr>
        </table>
    </div>
</div>


<!-- Approvers and Rejectors section -->
<div class="card p-4 mb-5">
    <h4 class="mb-4">Actors (Approvers and Rejectors)</h4>
    @if (Model.Reviews.Any())
    {
        <p class="text-muted mb-4">The "Run Code Analysis" button will be available only when there are at least two approvers. Only after analysis is successful will the plugin be open to be published successfully.</p>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th class="actions-col text-end">Comment</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int reviewerCount = 1;
                    }
                    @foreach (var review in Model.Reviews)
                    {
                        var detailsId = $"user_details_{review.UserId}";
                        <tr style="transition: background-color 0.3s; line-height: 1.2;">
                            <td class="fw-bold align-middle" style="padding: 0.5rem 0;">Reviewer @reviewerCount</td>
                            <td class="align-middle" style="padding: 0.5rem 0;">
                                <span class="badge bg-@(review.Status == "approve" ? "success" : "danger")">@(review.Status == "approve" ? "Approved" : "Rejected")</span>
                            </td>
                            <td class="align-middle" style="padding: 0.5rem 0;">
                                @review.DateActioned.ToTimeAgo()
                            </td>
                            <td class="text-end">
                                <div class="d-inline-flex">
                                    <button class="accordion-button collapsed only-for-js ms-0 d-inline-block" type="button" data-bs-toggle="collapse" data-bs-target="#@detailsId" aria-expanded="false" aria-controls="@detailsId">
                                        <vc:icon symbol="caret-down" />
                                    </button>
                                </div>
                            </td>
                        </tr>

                        <tr id="@detailsId" class="user-details-row collapse" style="background-color: #f8f9fa;">
                            <td colspan="3" class="border-top-0" style="padding: 0.5rem;">
                                @if (!string.IsNullOrEmpty(review.Comment))
                                {
                                    <span>@review.Comment</span>
                                }
                                else
                                {
                                    <span class="text-secondary">No Comments</span>
                                }
                            </td>
                        </tr>
                        reviewerCount++;
                    }
                </tbody>
            </table>
        </div>


        <div class="d-flex justify-content-end mt-4">
            @{
                bool isButtonEnabled = Model.Reviews.Count(c => c.Status == "approve") >= 2;
            }
            <button type="button" class="btn @(isButtonEnabled ? "btn-primary" : "btn-secondary text-muted")" @(isButtonEnabled ? "" : "disabled")>
                Run Code Analysis </button>
        </div>
    }
    else
    {
        <p class="text-muted">No approval action yet.</p>
    }
</div>


<!-- Approval Modal -->
<div class="modal fade" id="pgpKeyModal-approve" tabindex="-1" aria-labelledby="pgpKeyModalLabel-approve" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="PluginStatusUpdate" method="post">
                <div class="modal-header">
                    <div>
                        <h4 class="modal-title mb-0" id="pgpKeyModalLabel-reject">Enter signature for approval</h4>
                        <p class="text-muted mt-2 mb-0">Use the plugin slug: <strong>@Model.ProjectSlug</strong> as message to sign with your keys.</p>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="action" value="approve" />
                    <input type="hidden" name="PluginSlug" value="@Model.ProjectSlug" />
                    <div class="form-group mt-3">
                        <label for="message">Message</label>
                        <textarea id="message" name="Message" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="pgpKey-approve">PGP Signature message</label>
                        <textarea id="pgpKey-approve" name="ArmoredMessage" class="form-control" rows="5"
                                  placeholder="It should start with `-----BEGIN PGP MESSAGE-----`&#13;&#10;&#13;&#10;&#13;&#10;and end with `-----END PGP MESSAGE-----`." required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Approve</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Rejection Modal -->
<div class="modal fade" id="pgpKeyModal-reject" tabindex="-1" aria-labelledby="pgpKeyModalLabel-reject" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="PluginStatusUpdate" method="post">
                <div class="modal-header">
                    <div>
                        <h4 class="modal-title mb-0" id="pgpKeyModalLabel-reject">Enter signature for rejection</h4>
                        <p class="text-muted mt-2 mb-0">Use the plugin slug: <strong>@Model.ProjectSlug</strong> as message to sign with your keys.</p>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="action" value="reject" />
                    <input type="hidden" name="PluginSlug" value="@Model.ProjectSlug" />
                    <div class="form-group mt-3">
                        <label for="message">Rejection Reason</label>
                        <textarea id="message" name="Message" class="form-control" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="pgpKey-reject">PGP Signature message</label>
                        <textarea id="pgpKey-reject" name="ArmoredMessage" class="form-control" rows="5"
                                  placeholder="It should start with `-----BEGIN PGP MESSAGE-----`&#13;&#10;&#13;&#10;&#13;&#10;and end with `-----END PGP MESSAGE-----`." required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger">Reject</button>
                </div>
            </form>
        </div>
    </div>
</div>
